//
//  CreateReservationInteractor.swift
//  PetGroomerShop
//
//  Created by Lee, Jeongsik on 2019/06/20.
//  Copyright (c) 2019 Lee, Jeongsik. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateReservationBusinessLogic
{
    var reservationToEdit: Reservation? { get }
    func createReservation(request: CreateReservation.CreateReservation.Request)
    func showReservationToEdit(request: CreateReservation.EditReservation.Request)
    func updateReservation(request: CreateReservation.UpdateReservation.Request)
}

protocol CreateReservationDataStore
{
    var reservationToEdit: Reservation? { get set }
}

class CreateReservationInteractor: CreateReservationBusinessLogic, CreateReservationDataStore
{
    var presenter: CreateReservationPresentationLogic?
    
    var reservationsWorker = ReservationsWorker(reservationsStore: ReservationsMemStore())
    var reservationToEdit: Reservation?
    
    // MARK: - Create reservation
    
    func createReservation(request: CreateReservation.CreateReservation.Request)
    {
        let reservationToCreate = buildReservationFromReservationFormFields(request.reservationFormFields)
        
        reservationsWorker.createReservation(reservationToCreate: reservationToCreate) { (reservation: Reservation?) in
            self.reservationToEdit = reservation
            let response = CreateReservation.CreateReservation.Response(reservation: reservation)
            self.presenter?.presentCreatedReservation(response: response)
        }
    }
    
    // MARK: - Edit reservation
    
    func showReservationToEdit(request: CreateReservation.EditReservation.Request)
    {
        if let reservationToEdit = reservationToEdit {
            let response = CreateReservation.EditReservation.Response(reservation: reservationToEdit)
            presenter?.presentReservationToEdit(response: response)
        }
    }
    
    // MARK: - Update reservation
    
    func updateReservation(request: CreateReservation.UpdateReservation.Request)
    {
        let reservationToUpdate = buildReservationFromReservationFormFields(request.reservationFormFields)
        
        reservationsWorker.updateReservation(reservationToUpdate: reservationToUpdate) { (reservation) in
            self.reservationToEdit = reservation
            let response = CreateReservation.UpdateReservation.Response(reservation: reservation)
            self.presenter?.presentUpdatedReservation(response: response)
        }
    }
    
    // MARK: - Helper function
    
    private func buildReservationFromReservationFormFields(_ orderFormFields: CreateReservation.ReservationFormFields) -> Reservation
    {
        return Reservation.init(petName: orderFormFields.petName,
                                petSpecies: orderFormFields.petSpecies,
                                ownerName: orderFormFields.ownerName,
                                ownerPhone: orderFormFields.ownerPhone,
                                groomerName: orderFormFields.groomerName,
                                groomTime: orderFormFields.groomTime,
                                id: orderFormFields.id)
    }
    
}
