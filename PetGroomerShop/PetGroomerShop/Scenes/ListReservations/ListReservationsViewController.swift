//
//  ListReservationsViewController.swift
//  PetGroomerShop
//
//  Created by Lee, Jeongsik on 2019/06/21.
//  Copyright (c) 2019 Lee, Jeongsik. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListReservationsDisplayLogic: class
{
    func displayFetchedReservations(viewModel: ListReservations.FetchReservations.ViewModel)
}

class ListReservationsViewController: UIViewController, ListReservationsDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    
    var interactor: ListReservationsBusinessLogic?
    var router: (NSObjectProtocol & ListReservationsRoutingLogic & ListReservationsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListReservationsInteractor()
        let presenter = ListReservationsPresenter()
        let router = ListReservationsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.dataSource = self
        tableView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool)
    {
        super.viewWillAppear(animated)
        fetchReservations()
    }
    
    // MARK: - Fetch orders
    @IBOutlet weak var tableView: UITableView!
    
    var displayedReservations: [ListReservations.FetchReservations.ViewModel.DisplayedReservation] = []
    
    func fetchReservations()
    {
        let request = ListReservations.FetchReservations.Request()
        interactor?.fetchReservations(request: request)
    }
    
    func displayFetchedReservations(viewModel: ListReservations.FetchReservations.ViewModel)
    {
        displayedReservations = viewModel.displayedReservations
        tableView.reloadData()
    }
    
    // MARK: - Table view data source
    
    func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return displayedReservations.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let displayedReservation = displayedReservations[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "ReservationTableViewCell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "ReservationTableViewCell")
        }
        cell?.textLabel?.text = displayedReservation.petName
        cell?.detailTextLabel?.text = displayedReservation.groomTime
        return cell!
    }
    
}
